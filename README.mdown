#JsonML for Dart

This is an implementation of JsonML in Dart. JsonML is a way to avoid the verbosity and expensiveness of XML/HTML on one hand, and the unsafeness and inflexibility of `innerHTML` on the other hand.

## The JsonML class

JsonML can be seen as nothing more than a (recursive) List (= Array in JavaScript). Therefore, the JsonML class extends List and only provides a couple of helpers on top of it. 

## JsonML-to-DOM

This part of the library takes a JsonML object (or just List) containing HTML nodes and creates their DOM representation. Using `customMarkup` callbacks, the user can use a superset of HTML.

## HTML-to-JsonML

Given valid HTML5, this part of the library will created JsonML.

## Save JsonML

I am thinking of providing a way to generate JsonML that only allows safe 

---

# History

This project started as "HSON" before the author realized this idea can't be original &mdash; and of course it wasn't! And JsonML probably makes more sense than the original (slightly less verbose but also less flexible) markup. The original README is left here for the sake of software archeologists.

# HSON

**HSON** is HTML in JSON. It's useful for sending rich text over AJAX &mdash; it is designed to be **quick to parse** by the client side and **safe**.

## Problem

More and more of the text on the web is sent over AJAX calls and displayed programatically on the client via JavaScript/Dart/whatever. When rich text is needed (i.e. text with _emphasis_, **bold** typefaces, [links](http://www.example.com) and more), it is often sent as HTML. That HTML is then either parsed on the client (= slow), or it pasted into the DOM verbatim via `innerHTML` (unsafe).

## Solution

Inspired by Frederik Braun's [html2dom][], HSON is a way to represent rich text in a way that is as close as possible to what the client side (the browser) needs.

1. It's JSON, and therefore it is inexpensive to parse. (As opposed to, say, an HTML string.)
2. It's JSON, and therefore a little bit less verbose than HTML.
3. It's a list (array) of nodes, and so it's pre-formatted for fast DOM building on the client side.
4. It's made so that there is no need to ever touch the unsafe `innerHTML` setter.
5. Semantically, it's a (validated) subset of HTML which doesn't allow unsafe things like `javascript:` in HREF. Therefore, it is ready for user-generated input.
6. Although less verbose and focused on speed, it still retains some readability.
7. It comes with an easy-to-use library/tooling in [Dart][]. It's trivial to build libraries and tools in other languages, too.

## Example use

When building the DOM on the client side.

    import "package:hson/hson2dom.dart";
    
    var destination = querySelector("div#destination");
    var json = /* Get from somewhere. */;
    hson2dom(json, destination);

When creating the JSON to send to the client side. (Here, we're building from HTML.)

    import "package:hson/hson.dart";
    
    var json = encode("<p class='blue'><a href='http://www.example.com/'>"
                      "This</a> is <em><strong>very</strong></em> "
                      "interesting.</p>");

## Example HSON

The HTML string above would be encoded into the following JSON.

    [
      "HSON0.1",
      [
        ["p", "blue"],
        [
          ["a", "http://www.example.com/"],
          "This"
        ],
        " is ",
        [
          ["em"],
          [
            ["strong"],
            "very"
          ]
        ],
        " interesting."
      ]
    ]

## Definition

HSON ('HTML Save over JSON') is a semantically a subset of HTML and syntactically valid JSON.

[html2dom]: http://blog.mozilla.org/security/2013/09/24/introducing-html2dom-an-alternative-to-setting-innerhtml/
[Dart]: http://www.dartlang.org/